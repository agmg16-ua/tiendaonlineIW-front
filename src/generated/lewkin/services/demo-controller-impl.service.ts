/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { demoHasAdminRole } from '../fn/demo-controller-impl/demo-has-admin-role';
import { DemoHasAdminRole$Params } from '../fn/demo-controller-impl/demo-has-admin-role';
import { demoHasUserRole } from '../fn/demo-controller-impl/demo-has-user-role';
import { DemoHasUserRole$Params } from '../fn/demo-controller-impl/demo-has-user-role';
import { demoNoAuthentication } from '../fn/demo-controller-impl/demo-no-authentication';
import { DemoNoAuthentication$Params } from '../fn/demo-controller-impl/demo-no-authentication';

@Injectable({ providedIn: 'root' })
export class DemoControllerImplService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `demoNoAuthentication()` */
  static readonly DemoNoAuthenticationPath = '/demo';

  /**
   * Test an endpoint without authentication.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `demoNoAuthentication()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoNoAuthentication$Response(params?: DemoNoAuthentication$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return demoNoAuthentication(this.http, this.rootUrl, params, context);
  }

  /**
   * Test an endpoint without authentication.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `demoNoAuthentication$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoNoAuthentication(params?: DemoNoAuthentication$Params, context?: HttpContext): Observable<void> {
    return this.demoNoAuthentication$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `demoHasUserRole()` */
  static readonly DemoHasUserRolePath = '/api/v1/demo/role/user';

  /**
   * Checks if user has USER role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `demoHasUserRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoHasUserRole$Response(params?: DemoHasUserRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return demoHasUserRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Checks if user has USER role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `demoHasUserRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoHasUserRole(params?: DemoHasUserRole$Params, context?: HttpContext): Observable<void> {
    return this.demoHasUserRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `demoHasAdminRole()` */
  static readonly DemoHasAdminRolePath = '/api/v1/auth/demo/role/admin';

  /**
   * Checks if user has ADMIN role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `demoHasAdminRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoHasAdminRole$Response(params?: DemoHasAdminRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return demoHasAdminRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Checks if user has ADMIN role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `demoHasAdminRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  demoHasAdminRole(params?: DemoHasAdminRole$Params, context?: HttpContext): Observable<void> {
    return this.demoHasAdminRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
